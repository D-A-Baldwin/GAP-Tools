Read("spacegroup_tools.txt");


IsTorsionFreeSpaceGroup := function(spacegroup_gens)
  # This takes as its input the generators of some spacegroup written in the standard form
  # This means that a generator, g, and its corresponding translation, t, are written as an 
	# (n+1) by (n+1) matrix [[g,t],[0,1]] where g is n by n, t is n by 1 and the last row
	# contains n zeroes and a single 1.
  # The output is true if the action of this spacegroup on R^n has no fixed points and 
  # false otherwise.

	local gens_spacegroup, n, gens_group, gen, genslength, transvec, i, trans_elems, elems, identity_pos,
	fixpts;
	
	gens_spacegroup := GeneratorsOfGroup(spacegroup);
	
	n := Length(gens_spacegroup[1]);
	
	gens_group := [];
	for gen in gens_spacegroup do
		Add(gens_group, gen{[1..n-1]}{[1..n-1]});
	od;
	
	gens_group := Filtered(gens_group, i -> not i = IdentityMat(n-1));
	
	genslength := Length(gens_group);
	
	transvec := [];
	
	for i in [1..genslength] do
		Append(transvec, TransposedMat(gens_spacegroup[i])[n]{[1..n-1]});
	od;
	
	elems := SpaceGroupTranslationsForAllElems(gens_group, transvec)[1];;
	
	trans_elems := SpaceGroupTranslationsForAllElems(gens_group, transvec)[2];;
	
	identity_pos := Position(elems, One(Group(gens_group)));;
	
	fixpts := List(Filtered([1..Length(elems)], i-> not i=identity_pos), i-> FixedPointsOfElement(elems[i], trans_elems[i]));;
	
	return ForAll(fixpts, i-> i=[ [ ], [ ] ]) ;
end;
